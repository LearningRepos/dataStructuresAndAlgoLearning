public class Bubble {
    public static void Bubble(int[] array){
        //The outer loop can have more operations than array.length-1 but wastes more time on an already sorted array
        //you just need array.length iterations in outer loop for bubble sort (keep in mind we start at 0)
        for(int i =0; i<array.length-1; i++){
            //we are checking 1 element in front so we are forced to do array.length-1 (decreasing iterations => index out of bounds error)
            //-i to reduce swaps
            for(int j=0; j<array.length-1-i; j++){
                //Does the swap
                if(array[j]>array[j+1]){
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
    }

    //Still O(n^2) time compelxity but less swaps than traditional Bubble Sort bc we check if a swap has happened
    public static void BubbleOptimized(int[] array){
        //variable turns false if swap happens
        var noSwap = true;
        for(int i =0; i<array.length-1; i++){
            for(int j=0; j<array.length-1-i; j++){
                if(array[j]>array[j+1]){
                    noSwap = false;
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
            //no swap = exit out of loop
            if(noSwap){
                break;
            }
        }
    }

    public static void main(String[] args){

        //original unsorted array
        int[] array = {};
        System.out.println("Original Array");
        for(int i =0; i<array.length; i++){
            System.out.print(array[i] +" ");
        }
        System.out.println();
        System.out.println();

        System.out.println("Bubble Sorted Array");
        //Bubble Sort implemented
        Bubble(array);
        for(int i =0; i<array.length; i++){
            System.out.print(array[i] +" ");
        }
        System.out.println();
        System.out.println();

        //Optimized Bubble Sort Implemented
        System.out.println("Bubble Sort Optimized Array");
        BubbleOptimized(array);
        for(int i =0; i<array.length; i++){
            System.out.print(array[i] +" ");
        }

    }
}
